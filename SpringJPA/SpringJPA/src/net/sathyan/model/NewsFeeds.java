/*
 * Created on 2020-09-14 ( Time 15:38:53 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
// This Bean has a basic Primary Key (not composite)

package net.sathyan.model;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.SequenceGenerator;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.SqlResultSetMappings;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


/**
 * Persistent class for entity stored in table "NEWS_FEEDS"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="NEWS_FEEDS", schema="PROD" )


//@SqlResultSetMapping(
//        name = "findNewsFeedMapping",
//        classes = @ConstructorResult(
//                targetClass = NewsFeedVO.class,
//                columns = {
//                        @ColumnResult(name = "id", type = Long.class),
//                        @ColumnResult(name = "content", type = String.class)
//                       
//                }
//        )
//    )


@SqlResultSetMappings({
    @SqlResultSetMapping(
    		  name = "findNewsFeedMapping",
    	        classes = @ConstructorResult(
    	                targetClass = NewsFeedVO.class,
    	                columns = {
    	                        @ColumnResult(name = "id", type = Long.class),
    	                        @ColumnResult(name = "content", type = String.class)
    	                       
    	                }
    	        )
    ),
    
    @SqlResultSetMapping(
  		  name = "assocDoc",
  	        classes = @ConstructorResult(
  	                targetClass = DocMangDocs.class,
  	                columns = {
  	                        @ColumnResult(name = "associateDocumentId", type = java.lang.Long.class ),
  	                        @ColumnResult(name = "doc", type = java.sql.Blob.class)
  	                       
  	                }
  	        )
  ),
    
  })

public class NewsFeeds
    implements Serializable, Cloneable
{

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name="NEWS_FEED_ID", nullable=false)
    @SequenceGenerator( name = "NewsFeedssSeq", schema="PROD", sequenceName = "NEWS_FEEDS_SEQ", allocationSize = 1, initialValue = 1 )
    @GeneratedValue( strategy = GenerationType.SEQUENCE, generator = "NewsFeedssSeq" )
    private Long       newsFeedId   ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS
    //----------------------------------------------------------------------
    @Column(name="HEADLINE", length=50)
    private String     headline     ;

    @Column(name="LT_NEWS_FEED_STATUS_ID")
    private Long       ltNewsFeedStatusId ;

    @Column(name="NEWS_FEED_TYPE", length=1)
    private String     newsFeedType ;

    @Column(name="STORY", length=3000)
    private String     story        ;

    @Column(name="BRAND_ID")
    private Long       brandId      ;

    @Column(name="APPROVED_USER_ID")
    private Long       approvedUserId ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="APPROVED_DATE")
    private Date       approvedDate ;

    @Column(name="CREATED_USER_ID", nullable=false)
   private Long       createdUserId ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CREATED_DATE", nullable=false)
  private Date       createdDate  ;

    @Column(name="UPDATED_USER_ID", nullable=false)
  private Long       updatedUserId ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="UPDATED_DATE", nullable=false)
   private Date       updatedDate  ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public NewsFeeds() {
        super();
    }

    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setNewsFeedId( Long newsFeedId ) {
        this.newsFeedId = newsFeedId ;
    }
    public Long getNewsFeedId() {
        return this.newsFeedId;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : HEADLINE ( VARCHAR2 )
    public void setHeadline( String headline ) {
        this.headline = headline;
    }
    public String getHeadline() {
        return this.headline;
    }

    //--- DATABASE MAPPING : LT_NEWS_FEED_STATUS_ID ( NUMBER )
    public void setLtNewsFeedStatusId( Long ltNewsFeedStatusId ) {
        this.ltNewsFeedStatusId = ltNewsFeedStatusId;
    }
    public Long getLtNewsFeedStatusId() {
        return this.ltNewsFeedStatusId;
    }

    //--- DATABASE MAPPING : NEWS_FEED_TYPE ( CHAR )
    public void setNewsFeedType( String newsFeedType ) {
        this.newsFeedType = newsFeedType;
    }
    public String getNewsFeedType() {
        return this.newsFeedType;
    }

    //--- DATABASE MAPPING : STORY ( VARCHAR2 )
    public void setStory( String story ) {
        this.story = story;
    }
    public String getStory() {
        return this.story;
    }

    //--- DATABASE MAPPING : BRAND_ID ( NUMBER )
    public void setBrandId( Long brandId ) {
        this.brandId = brandId;
    }
    public Long getBrandId() {
        return this.brandId;
    }

    //--- DATABASE MAPPING : APPROVED_USER_ID ( NUMBER )
    public void setApprovedUserId( Long approvedUserId ) {
        this.approvedUserId = approvedUserId;
    }
    public Long getApprovedUserId() {
        return this.approvedUserId;
    }

    //--- DATABASE MAPPING : APPROVED_DATE ( DATE )
    public void setApprovedDate( Date approvedDate ) {
        this.approvedDate = approvedDate;
    }
    public Date getApprovedDate() {
        return this.approvedDate;
    }

    //--- DATABASE MAPPING : CREATED_USER_ID ( NUMBER )
    public void setCreatedUserId( Long createdUserId ) {
        this.createdUserId = createdUserId;
    }
    public Long getCreatedUserId() {
        return this.createdUserId;
    }

    //--- DATABASE MAPPING : CREATED_DATE ( DATE )
    public void setCreatedDate( Date createdDate ) {
        this.createdDate = createdDate;
    }
    public Date getCreatedDate() {
        return this.createdDate;
    }

    //--- DATABASE MAPPING : UPDATED_USER_ID ( NUMBER )
    public void setUpdatedUserId( Long updatedUserId ) {
        this.updatedUserId = updatedUserId;
    }
    public Long getUpdatedUserId() {
        return this.updatedUserId;
    }

    //--- DATABASE MAPPING : UPDATED_DATE ( DATE )
    public void setUpdatedDate( Date updatedDate ) {
        this.updatedDate = updatedDate;
    }
    public Date getUpdatedDate() {
        return this.updatedDate;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(newsFeedId);
        sb.append("]:"); 
        sb.append(headline);
        sb.append("|");
        sb.append(ltNewsFeedStatusId);
        sb.append("|");
        sb.append(newsFeedType);
        sb.append("|");
        sb.append(story);
        sb.append("|");
        sb.append(brandId);
        sb.append("|");
        sb.append(approvedUserId);
        sb.append("|");
        sb.append(approvedDate);
        sb.append("|");
        sb.append(createdUserId);
        sb.append("|");
        sb.append(createdDate);
        sb.append("|");
        sb.append(updatedUserId);
        sb.append("|");
        sb.append(updatedDate);
        return sb.toString(); 
    } 
    
    
//    @OneToMany(mappedBy = "newsFeeds", fetch = FetchType.LAZY,
//            cascade = CascadeType.ALL)
//    private Set<NewsFeedApprovers> pages;



    //----------------------------------------------------------------------
    // clone METHOD
    //----------------------------------------------------------------------
    public NewsFeeds clone()
        throws CloneNotSupportedException
    {
        NewsFeeds clone = (NewsFeeds)super.clone();

        return clone;
    }
}
